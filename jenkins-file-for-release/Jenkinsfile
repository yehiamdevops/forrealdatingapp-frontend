pipeline {
    agent {
        
        label 'built-in'
    }



    stages {
        // Stage 1: Checkout code from SCM (Git)

        stage('Checkout') {
            steps {
                checkout scm // Checkout code from the configured SCM (e.g., Git)
             
            }
            
        }
        
        //  Build the application using Gradle
        stage('Build') {
            steps {
                script {
                        
                        sh 'chmod +x gradlew'
                        sh './gradlew clean build' // Use 'sh' for Linux/macOS
                
                }
            }
        }
        stage('Adding Runtime') {
            steps {
                script {
                 
                    sh 'chmod +x gradlew'
                    sh './gradlew downloadJre' // Use 'sh' for Linux/macOS
                   
                }
            }
        }

        // Stage 3: Create EXE file
        stage('Create EXE') {
            steps {
                script {
                    
                    sh 'chmod +x gradlew'
                    sh './gradlew createExe' // Use 'sh' for Linux/macOS
                   
                }
            }
        }

        // Stage 4: Create ZIP file
        stage('Create Zip') {
            steps {
                script {
                        sh 'chmod +x gradlew'
                        sh './gradlew zipLaunch4j' // Use 'sh' for Linux/macOS
                
                }
            }
        }

    

        

        // Stage 5: Publish GitHub Release
        stage('Publish GitHub Release') {
            steps {
                script {
                    def zipFilePath = "${WORKSPACE}/build/distributions/forrealdatingapp.zip"
                    echo "Uploading: ${zipFilePath}"

                    writeFile file: 'release-notes.md', text: "Release ${env.BUILD_NUMBER} - Built by Jenkins"

                    withCredentials([string(credentialsId: 'github-token', variable: 'GITHUB_TOKEN')]) {
                        sh """
                        gh release create v${env.BUILD_NUMBER} \
                            --title "Release ${env.BUILD_NUMBER}" \
                            --notes-file release-notes.md \
                            --repo yehiamdevops/my-front-end \
                            ${zipFilePath}
                        """
                    }
                }
            }
        }
           stage('Clean Workspace') {
            steps {
                script {
                        sh 'chmod +x gradlew'
                        sh './gradlew clean' // Use 'sh' for Linux/macOS
                
                }
            }
        }

    }

    post {
        // Actions to perform after the pipeline completes
        success {
            echo 'Pipeline succeeded! ðŸŽ‰'
            // Notify the team (e.g., via email, Slack, etc.)
        }
        failure {
            echo 'Pipeline failed! ðŸ˜¢'
            // Notify the team (e.g., via email, Slack, etc.)
        }
    }
}