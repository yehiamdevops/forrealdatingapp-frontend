pipeline {
    agent {
        label 'unix'
    }



    stages {
        // Stage 1: Checkout code from SCM (Git)

        stage('Checkout') {
            steps {
                checkout scm // Checkout code from the configured SCM (e.g., Git)
             
            }
            
        }
        
        //  Build the application using Gradle
        stage('Build') {
            steps {
                script {
                        sh 'chmod -R 777 ${WORKSPACE}'
                        sh 'chmod +x gradlew'
                        sh './gradlew clean build' // Use 'sh' for Linux/macOS
                
                }
            }
        }
        stage('Adding Runtime') {
            steps {
                script {
                    
                    sh 'chmod +x gradlew'
                    sh './gradlew downloadJre' // Use 'sh' for Linux/macOS
                   
                }
            }
        }

        // Stage 3: Create EXE file
        stage('Create EXE') {
            steps {
                script {
                    
                    sh 'chmod +x gradlew'
                    sh './gradlew createExe' // Use 'sh' for Linux/macOS
                   
                }
            }
        }

        // Stage 4: Create ZIP file
        stage('Create Zip') {
            steps {
                script {
                        sh 'chmod +x gradlew'
                        sh './gradlew zipLaunch4j' // Use 'sh' for Linux/macOS
                
                }
            }
        }

 


        

        // Stage 5: Publish GitHub Release
        stage('Publish GitHub Release') {
                steps {
                    script {
                        // Use absolute path with proper variable expansion
                        def zipFilePath = "${env.WORKSPACE}/build/distributions/forrealdatingapp.zip"
                        sh 'chmod -R 777 ${WORKSPACE}/build/distributions'
                        // Debug: Print the exact path being used
                        echo "Checking for file at: ${zipFilePath}"
                        
                        // Verify file exists with proper error handling
                        if (!fileExists(zipFilePath)) {
                            // Debug: List directory contents
                            sh "ls -la ${env.WORKSPACE}/build/distributions/ || true"
                            error("‚ùå ERROR: ZIP file not found at ${zipFilePath}. Build may have failed.")
                        }
                        
                        // Debug: Show file info
                        sh "ls -lh ${zipFilePath}"
                        sh "file ${zipFilePath}"
                        
                        // Archive artifact in Jenkins first (for debugging)
                        archiveArtifacts artifacts: 'build/distributions/*.zip', fingerprint: true
                        
                        // Create GitHub release
                        writeFile file: 'release-notes.md', text: "Release ${env.BUILD_NUMBER}"
                        
                        try {
                            createGitHubRelease(
                                credentialId: 'github-token',
                                repository: 'yehiamdevops/forrealdatingapp-frontend',
                                tag: "v${env.BUILD_NUMBER}",
                                commitish: 'main',
                                bodyFile: 'release-notes.md',
                                draft: false
                            )
                            uploadGithubReleaseAsset(
                                credentialId: 'github-token',
                                repository: 'yehiamdevops/forrealdatingapp-frontend',
                                tagName: "v${env.BUILD_NUMBER}",
                                uploadAssets: [
                                    [filePath: 'release-notes.md'], 
                                    [filePath: zipFilePath]
                                ]
                            )
                        } catch (Exception e) {
                            error("üö® GitHub release failed: ${e.getMessage()}")
                        }
                    }
                }
            }
           stage('Clean Workspace') {
            steps {
                script {
                        sh 'chmod +x gradlew'
                        sh './gradlew clean' // Use 'sh' for Linux/macOS
                        
                
                }
            }
        }

    }

    post {
        // Actions to perform after the pipeline completes
        success {
            echo 'Pipeline succeeded! üéâ'
            // Notify the team (e.g., via email, Slack, etc.)
        }
        failure {
            echo 'Pipeline failed! üò¢'
          
            // Notify the team (e.g., via email, Slack, etc.)
        }
    }
}